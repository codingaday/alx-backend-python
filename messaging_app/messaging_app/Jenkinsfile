pipeline {
  agent any
  options {
    timestamps()
    ansiColor('xterm')
    skipDefaultCheckout(true)
  }
  triggers { }  // Manual only

  environment {
    DOCKER_IMAGE = 'abebedev/messaging-app' // replace with your Docker Hub username
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main',
            url: 'https://github.com/codingaday/alx-backend-python.git',
            credentialsId: 'github-credentials'
        sh 'ls -R .'
      }
    }

    stage('Set up Python venv & install deps') {
      steps {
        dir('messaging_app/messaging_app') {
          sh '''
            set -euxo pipefail
            python3 --version
            python3 -m venv .venv
            . .venv/bin/activate
            python3 -m pip install --upgrade pip

            # Install from requirements.txt
            pip3 install -r ../requirements.txt || true
            pip3 install -r messaging_app/requirements.txt || true

            pip3 install pytest pytest-cov
          '''
        }
      }
    }

    stage('Run tests') {
      steps {
        dir('messaging_app/messaging_app') {
          sh '''
            set -euxo pipefail
            . .venv/bin/activate
            mkdir -p reports
            pytest -q \
              --maxfail=1 --disable-warnings \
              --junitxml=reports/junit.xml \
              --cov=. --cov-report=xml:reports/coverage.xml
          '''
        }
      }
      post {
        always {
          junit 'messaging_app/messaging_app/reports/junit.xml'
          archiveArtifacts artifacts: 'messaging_app/messaging_app/reports/**', fingerprint: true
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('messaging_app') {
          script {
            echo "Building Docker image ${DOCKER_IMAGE}:${env.BUILD_ID}"
            dockerImage = docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}")
          }
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
            dockerImage.push()          // push tag: BUILD_ID
            dockerImage.push('latest')  // also push latest
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
